<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <title>Einstein Analytics Embedded Demo</title>
  <!--Custom style -->
  <style>
    body {
      font-family: font-family: Roboto, RobotoDraft, Helvetica, Arial, sans-serif;
      font-size: 13px;
    }

    .chart-outer {
      background-color: #bce5ae;
      outline: 1px solid #bdbdbd;
      width: 396px;
      height: 212px;

    }

    .chart {
      background-color: #bce5ae;
      stroke: #bdbdbd;
      stroke-width: 1.0;

    }

    .chart rect {
      fill: #bf9133;
      stroke: #858c83;
      stroke-width: 1.0;
    }

    .chart text {
      fill: #404040;
      font: 8px sans-serif;
      text-anchor: middle;
      stroke-width: 0;
    }

    .chart text.title {
      font-size: 12px;
    }

    .chart circle {
      fill: #a5d2f7;
      stroke: #016de0;
      stroke-width: 1.0;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: none;
      shape-rendering: crispEdges;
    }

    .domain {
      fill: none;
      stroke: none;
    }

    .outer {
      margin: 15px;
      background-color #FFFFFF;
    }

    .row {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      width: 100%;
    }

    .column {
      display: flex;
      flex-direction: column;
      flex-basis: 100%;
      flex: 1;
      height: 220px;
    }

    .left-column {
      text-align: center;
    }

    .middle-column {
      width: 545px;
      text-align: center;
    }

    .right-column {
      text-align: center;
      position: relative;
      height: 220px;
    }

    .right-column .controls {
      padding: 1rem;
    }

    .right-column .company-container {
      position: absolute;
      bottom: 0;
      width: 100%;
      text-align: center;

    }
  </style>
</head>

<body>

  <div class='outer'>
    <div class='row'>
      <div class='column'>
        <div class='left-column'>
        </div>
      </div>
      <div class='column'>
        <div class='middle-column'>
          <div class="chart-outer">
            <svg class="chart"></svg>
          </div>
        </div>
      </div>
      <div class='column'>
        <div class='right-column'>
          <div class="controls">
            <span class="select-label">Sort</span>
            <select id="select" value="" onchange="handleSelect(this.value);"></select>
            <div class="company-container">
              <div id="company-name"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>


  <script src="https://d3js.org/d3.v3.min.js"></script>
  <script src="https://<%= domain %>.my.salesforce.com/lightning/lightning.out.js"></script>
  <script src="/javascripts/force.all.js"></script>
  <script src="/javascripts/util.js"></script>
  <script>
    var appId = '<%- appId %>';
    var domain = '<%- domain %>';
    //var loginURL = "https://login.salesforce.com";
    var loginURL = "https://einsteinprediction123.my.salesforce.com";
    var oauthCallbackURL = window.location.origin + "/oauthcallback.html";
    var oauth = force.OAuth.createInstance(appId, loginURL, oauthCallbackURL);
    var loAppName = "c:loApp";
    var _oauthResult = null;

    oauth.login().then(function (oauthResult) {
      _oauthResult = oauthResult;
      var domain = oauthResult.instanceURL.replace(/.my.salesforce.com/, '');
      domain = domain.replace(/https\:\/\//, '');
      var ltngURL = oauthResult.instanceURL.replace(/my.salesforce/, 'lightning.force');

      updateControls();
    });

    var queries = {
      all: "\
      q = load \"0FbB0000000HO4hKAG/0FcB0000002DipJKAS\"; \
      q = filter q by 'Company' == \"{{Company}}\"; \
      q = foreach q generate 'Company' as 'Company', 'Inquiries' as 'Inquiries', 'Time' as 'Time'; \
      q = order q by ('Company' asc, 'Time' asc); \
      q = limit q 100; \
      ",
      companies: " \
      q = load \"0FbB0000000HO4hKAG/0FcB0000002DipJKAS\"; \
      q = foreach q generate 'Company' as 'Company'; \
      q = order q by ('Company' asc); \
      q = limit q 100; \
      "
    };

    var query = " \
        q = load \"0FbB0000000HO4hKAG/0FcB0000002DipJKAS\"; \
        q = filter q by 'Company' == \"{{Company}}\"; \
        q = foreach q generate 'Company' as 'Company', 'Inquiries' as 'Inquiries', 'Time' as 'Time'; \
        q = order q by ('Company' asc, 'Time' asc); \
        q = limit q 100; \
      ";

    var testdata = {

    }

    function execQuery(data, callback) {
      var req = new XMLHttpRequest();
      req.onreadystatechange = function (event) {
        if (req.readyState == 2) {
        } else if (req.readyState == 4) {
          if (req.status === 200) {
            var json = req.response;
            var result = JSON.parse(json);
            if (typeof callback === 'function') {
              callback(null, result);
            }
          } else {
            // Something went wrong.
          }
        }
      };

      var url = _oauthResult.instanceURL + '/services/data/v46.0/wave/query';

      req.open('POST', url);

      req.setRequestHeader('Authorization', 'OAuth ' + _oauthResult.accessToken);
      req.setRequestHeader('Content-Type', 'application/json');

      var q = queries[data.queryName];
      if (data.options) {
        for (var key in data.options) {
          q = q.replace(new RegExp("{{\\s*" + key + "\\s*}}", "g"), data.options[key]);
        }
      }
      req.send(JSON.stringify({ query: q }));
    }

    function test() {
      execQuery({ 'Company': 'Forrester' });
    }
    function test2() {
      execQuery({ 'Company': 'Boris' });
    }
    function test3() {
      execQuery({ 'Company': 'Salesforce' });
    }
    function test4() {
      var data = [4, 8, 15, 16, 23, 42];
      updateChart(data);
    }

    function updateChart(data) {

      var maxWidth = 396;
      var maxHeight = 210;

      var width = maxWidth;
      var height = maxHeight;

      var barAreaWidth = 300;

      var barMaxHeight = 150;

      var y = d3.scale.linear()
        .range([barMaxHeight, 0]);

      var chart = d3.select(".chart")
        .attr("width", maxWidth)
        .attr("height", maxHeight);

      chart.selectAll("*").remove();

      y.domain([0, d3.max(data, function (d) { return d.value; })]);

      var innerBarWidth = 28;

      var barWidth = barAreaWidth / data.length;
      var barDelta = barWidth + (innerBarWidth / 2);

      var leftMargin = 58;

      var bar = chart.selectAll("g")
        .data(data)
        .enter().append("g")
        .attr("transform", function (d, i) { return "translate(" + ((i * barDelta) + leftMargin) + ", " + 35 + ")"; })


      bar.append("rect")
        .attr("y", function (d) { return y(d.value); })
        .attr("height", function (d) { return barMaxHeight - y(d.value); })
        .attr("width", innerBarWidth);

      bar.append("text")
        .attr("x", function (d) { return (innerBarWidth / 2); })
        .attr("y", function (d) { return y(d.value) - 12; })
        .attr("dy", ".75em")
        .text(function (d) { return d.value; });

      bar.append("text")
        .attr("x", function (d) { return (innerBarWidth / 2); })
        .attr("y", function (d) { return barMaxHeight + 8; })
        .attr("dy", ".75em")
        .text(function (d) { return d.name; });

      var circleRadius = 3;

      bar.append("circle")
        .attr("cy", function (d) { return y(d.value); })
        .attr("cx", function (d) { return 0; })
        .attr("r", function (d) { return circleRadius; });

      bar.append("circle")
        .attr("cy", function (d) { return barMaxHeight; })
        .attr("cx", function (d) { return 0; })
        .attr("r", function (d) { return circleRadius; });

      bar.append("circle")
        .attr("cy", function (d) { return y(d.value); })
        .attr("cx", function (d) { return innerBarWidth; })
        .attr("r", function (d) { return circleRadius; });

      bar.append("circle")
        .attr("cy", function (d) { return barMaxHeight; })
        .attr("cx", function (d) { return innerBarWidth; })
        .attr("r", function (d) { return circleRadius; });

      var xAxisLabels = [];
      var values = [];
      var maxValue = 0;
      data.forEach(function (d) {
        xAxisLabels.push(d.name);
        values.push(d.value);
        maxValue = d.value > maxValue ? d.value : maxValue;
      });

      var yAxisMax = Math.ceil(maxValue / 50) * 50;
      var yTicks = yAxisMax / 50;
      var yTickValues = [];
      for (var i = 0; i <= yTicks; i++) {
        yTickValues.push(i * 50);
      }

      var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left")
        .ticks(yTicks)
        .tickValues(yTickValues);

      var marginX = 30;
      var marginY = 35;

      chart.append("g")
        .attr("transform", "translate(" + marginX + "," + marginY + ")")
        .attr("class", "axis")
        .call(yAxis);

      var yAxisLeftMargin = 28;
      var yAxisRightMargin = 12;
      var yAxisWidth = width - (yAxisLeftMargin + yAxisRightMargin);

      chart.append("text")
        .attr('class', 'title')
        .attr("dx", maxWidth / 2)
        .attr("dy", 8)
        .attr("dominant-baseline", "text-before-edge")
        .attr("text-anchor", "middle")
        .text(function (d) { return 'Boris\' client inquiries'; });

    }


    function handleSelect(value) {
      update(value);
      document.getElementById('company-name').innerHTML = value;
    }

    function updateControls() {

      execQuery({ 'queryName': 'companies' }, function (err, result) {
        if (err) {

        } else {
          var records = result.results.records;
          var options = {};
          records.forEach(function (record) {
            options[record.Company] = record.Company;
          });
          handleSelect(records[0].Company);
          var select = document.getElementById('select');
          select.innerHTML = null;
          var option = null;
          for (var key in options) {
            option = document.createElement('option');
            option.value = key;
            option.innerText = key;
            select.appendChild(option);
          }
        }
      });
    }

    function update(companyName) {
      execQuery({ 'queryName': 'all', 'options': { 'Company': companyName } }, function (err, result) {
        if (err) {

        } else {
          var records = result.results.records;
          var data = [];
          records.forEach(function (record) {
            data.push({ name: record.Time, value: record.Inquiries });
          });
          updateChart(data);
        }
      });
    }

  </script>
</body>

</html>