<!DOCTYPE html>
<html>

<head>
  <title>Einstein Analytics - Lightning Out</title>
  <link href="/assets/styles/salesforce-lightning-design-system.min.css" type="text/css" rel="stylesheet" />
  <style>
    html,
    body {
      background-color: #f3f2f1;
    }
  </style>
</head>

<body>

  <div id="demo"/>

  <script src="https://<%= domain %>.my.salesforce.com/lightning/lightning.out.js"></script>
  <script src="https://statics.teams.microsoft.com/sdk/v1.4.2/js/MicrosoftTeams.min.js" crossorigin="anonymous">
  </script>
  <script src="/javascripts/force.all.js"></script>
  <script>
    var oauthResult = null;
    var oauthResultJson = null;

    try {
      oauthResultJson = '<%- oauthResult %>';
      //console.warn('oauthResultJson: ', oauthResultJson);
      oauthResult = JSON.parse(oauthResultJson);
      //console.warn('oauthResult: ', oauthResult);
    } catch (e) {
      console.warn('Exception: ', e);
    }

    var appId = '<%- appId %>';
    var loginURL = "https://login.salesforce.com";
    var oauthCallbackURL = window.location.origin + "/oauthcallback.html";
    var oauth = force.OAuth.createInstance(appId, loginURL, oauthCallbackURL);
    var _oauthResult = null;
    var loAppName = 'c:loApp';

    function loginToSalesforce(callback) {
      if (oauthResult) {
        if (typeof callback === 'function') {
          callback(null, oauthResult);
        }
      } else {
        oauth.login().then(function (_oauthResult) {
          //console.warn('_oauthResult: ', _oauthResult); 

          oauthResult = _oauthResult;

          storeToken(oauthResult, function (err, result) {
            console.warn('storeToken returned: ', err, result);
          });

          if (typeof callback === 'function') {
            callback(null, oauthResult);
          }

        });
      }
    }

    function storeToken(oauthResult, callback) {
      let host = 'https://' + window.location.hostname;
      let port = window.location.port;
      if (port) {
        host += ':' + port;
      }

      let url = host + '/auth/token';

      //console.warn('url: ' + url);

      var req = new XMLHttpRequest();     
      req.onreadystatechange = function(event) {
        //console.warn('event: ', event);
        //console.warn('req: ', req);
        // XMLHttpRequest.HEADERS_RECEIVED
        if (req.readyState == 2) {
        } else if (req.readyState == 4) {
          var result = null;
          var error = null;
          if (req.status >= 200 && req.status <= 299) {                    
            //console.log('response: ', req.response);
            result = JSON.parse(req.response);
          } else {
            // Something went wrong.
          }
          if (typeof callback === 'function') {
            callback(error, result);
          }
        }
      };

      req.open('POST', url);
    
      req.setRequestHeader('Content-Type', 'application/json');
      req.setRequestHeader('Access-Control-Allow-Origin', '*');
      //req.setRequestHeader('Authorization', 'Bearer ' + _oauthResult.accessToken);

      //console.warn('calling req.send');        
      let body = JSON.stringify(oauthResult);
      //console.warn('body: ', body);
      req.send(body); 

    }

    function setupSalesforce(teamInfo) {
      teamInfo = teamInfo || {};
      loginToSalesforce(function (err, result) {
        //console.warn('loginToSalesforce returned: ', err, result);
        var ltngURL = oauthResult.instanceURL.replace(/my.salesforce/, "lightning.force")

        $Lightning.use(loAppName, function (evt) {
          var config = {teamInfo: JSON.stringify(teamInfo)};
          $Lightning.createComponent("c:predictionServiceDemo", config, "demo", function (cmp, msg, err) {});
        }, ltngURL, oauthResult.accessToken);

      });
    }

    function setupTeams(callback) {
      console.warn('setupTeams');
      microsoftTeams.initialize();
      microsoftTeams.registerOnThemeChangeHandler(function (theme) {
        console.warn('theme changed: ', theme);
      });

      console.warn('calling microsoftTeams.authentication.getAuthToken');
      microsoftTeams.authentication.getAuthToken(function(a,b){console.warn(a,b)})

      console.warn('calling microsoftTeams.getContext');
      microsoftTeams.getContext(function (context) {
        console.warn('getContext returned: ', context);

        console.warn('calling microsoftTeams.getTabInstances');
        microsoftTeams.getTabInstances(function (tabInstances) {
          console.warn('getTabInstances returned: ', tabInstances);

          if (typeof callback === 'function') {
            callback(null, {context: context, tabInstances: tabInstances});
          }
        });
      });
    }

    function getTeamInfo() {
      let host = 'https://' + window.location.hostname;
      let port = window.location.port;
      if (port) {
        host += ':' + port;
      }

      let url = host + '/graph/beta/me/joinedTeams';

      console.warn('url: ' + url);

      var req = new XMLHttpRequest();     
      req.onreadystatechange = function(event) {
        //console.warn('event: ', event);
        //console.warn('req: ', req);
        // XMLHttpRequest.HEADERS_RECEIVED
        if (req.readyState == 2) {
        } else if (req.readyState == 4) {
          var result = null;
          var error = null;
          if (req.status >= 200 && req.status <= 299) {                    
            console.log('response: ', req.response);
            result = JSON.parse(req.response);
          } else {
            // Something went wrong.
          }
          if (typeof callback === 'function') {
            callback(error, result);
          }
        }
      };

      req.open('GET', url);
    
      req.setRequestHeader('Content-Type', 'application/json');
      req.setRequestHeader('Access-Control-Allow-Origin', '*');
      //req.setRequestHeader('Authorization', 'Bearer ' + _oauthResult.accessToken);

      //console.warn('calling req.send');        
      //let body = JSON.stringify(payload);
      req.send();//body); 

    }

    var _readyCallback = function () {
      //console.warn('document ready callback!!!');
      if (window.location.ancestorOrigins && (window.location.ancestorOrigins[0] === 'https://teams.microsoft.com')) {
        setupTeams(function(err, teamInfo) {
          console.warn('setupTeams returned: ', teamInfo);
          setupSalesforce(teamInfo);
        })  
      } else {
        setupSalesforce(null);
      }
    };

    if (document.readyState === "complete" || (document.readyState !== "loading" && !document.documentElement
      .doScroll)) {
      _readyCallback();
    } else {
      document.addEventListener("DOMContentLoaded", _readyCallback);
    }
  </script>
</body>

</html>