<!DOCTYPE html>
<html>
  <head>
    <title>
      Voice Proxy
    </title>
  </head>
  <body>
    <script type="text/javascript">
        var params = JSON.parse('<%- params %>');
        console.warn('params: ', params);
        var ltng_origin = params.ltng_origin;
        var ltng_url = params.ltng_url;
        var _uid = params.ltng_uid;
        
        console.warn('voiceproxy - mltng_origin: ', ltng_origin);
        console.warn('voiceproxy - ltng_url: ', ltng_url);
        console.warn('voiceproxy - _uid: ', _uid);
                
        window.addEventListener("message", messageHandler, true);
        var json = JSON.stringify({type: "ready", uid: _uid});
        var target = ltng_origin;
        if (window.parent && window.parent.postMessage && target !== null && target !== '') {
            window.parent.postMessage(json, target);
        }
            
        function messageHandler(event) {
            //console.warn('event.origin: ', event.origin);
            //console.warn('event.data: ', event.data);
            if (event.origin === ltng_origin) {
                event.preventDefault();
                event.stopPropagation();
                
                var data = JSON.parse(event.data);
                var type = data.type;
                var uid = data.uid;
                
                if (type === 'startDictation' && _uid === uid) {
                    startDictation(data.config);
                } else if (type === 'stopDictation' && _uid === uid) {
                    stopDictation(data.config);
                } else if (type === 'speak' && _uid === uid) {
                    speak(data.config);
                } else if (type === 'getVoices' && _uid === uid) {
                    getVoices(data.config);
                } else if (type === 'getByteTimeDomainData' && _uid === uid) {
                    getByteTimeDomainData(data.config);
                }
            }
        }
        
        var _voices = null;    // For use by API
        var _voiceList = null; // To return to client        

        function speak(config) {
        
            //console.warn('voiceproxy - speak: ', config);
            
            var synth = window.speechSynthesis;
            
            var utterThis = new SpeechSynthesisUtterance(config.phrase);
            
            //console.warn('voiceproxy - config.voice: ', config.voice);
            
            if (_voices === null) {
                _getVoices();
            }
            
            for (var i = 0; i < _voices.length; i++) {
                //console.warn('_voices[i].name: ', _voices[i].name);
                if (_voices[i].name === config.voice) {                
                    utterThis.voice = _voices[i];
                    break;
                }
            }
            
            utterThis.volume = config.volume;
            utterThis.rate = config.rate;
            utterThis.pitch = config.pitch;
            
            utterThis.onstart = function(e){
                _sendResponse({
                    source: 'SpeechSynthesis',
                    phase: 'onstart',
                    config: config
                });
            }

            utterThis.onend = function(e){            
                _sendResponse({
                    source: 'SpeechSynthesis',
                    phase: 'onend',
                    config: config
                });
            }
            
/*            
            synth.onstart = function(e) {
                _sendResponse({
                    phase: 'onstart',
                    config: config
                });
            }
            synth.onend = function(e) {
                _sendResponse({
                    phase: 'onend',
                    config: config
                });
            }
            synth.onpause = function(e) {
                _sendResponse({
                    phase: 'onpause',
                    config: config
                });
            }
            synth.onresume = function(e) {
                _sendResponse({
                    phase: 'onresume',
                    config: config
                });
            }            
            synth.onerror = function(e) {
                _sendResponse({
                    phase: 'onerror',
                    error: {
                        error: e.error,
                        message: e.message
                    },
                    config: config
                });
            }
            synth.onmark = function(e) {
                _sendResponse({
                    phase: 'onmark',
                    mark: {
                        name: e.name
                    },
                    config: config
                });
            }
            synth.onboundary = function(e) {
                _sendResponse({
                    phase: 'onboundary',
                    boundary: {
                        name: e.name
                    },
                    config: config
                });
            }
            
*/            
            synth.speak(utterThis);
            
            
        }
        
        function _sendResponse(response) {
            var json = JSON.stringify({type: "response", uid: _uid, response: response});
            window.parent.postMessage(json, ltng_origin);                    
        }
        
        function _getVoices() {
            //console.warn('voiceproxy - _getVoices');
            setTimeout(function() {
                var voices = window.speechSynthesis.getVoices();
                var voiceList = [];
                var voice = null;
                voices.forEach(function(v) {
                    voice = {
                        voiceURI: v.voiceURI,
                        name: v.name,
                        lang: v.lang,
                        localService: v.localService,
                        default: v.default
                    };
                    voiceList.push(voice);
                });
                
                _voices = voices;
                _voiceList = voiceList;
            }, 1000);
        }
        
        if (window.speechSynthesis && typeof window.speechSynthesis.onvoiceschanged !== 'undefined') {
            window.speechSynthesis.onvoiceschanged = function() {
                var voices = window.speechSynthesis.getVoices();
                var voiceList = [];
                var voice = null;
                voices.forEach(function(v) {
                    voice = {
                        voiceURI: v.voiceURI,
                        name: v.name,
                        lang: v.lang,
                        localService: v.localService,
                        default: v.default
                    };
                    voiceList.push(voice);
                });
                
                _voices = voices;
                _voiceList = voiceList;
                
            };
        } else {
            _getVoices();
        }
                                            
        function getVoices(config) {
            
            var response = {
                source: 'GetVoices', 
                voices: _voiceList,                   
                config: config
            }; 

            var json = JSON.stringify({type: "response", uid: _uid, response: response});
            window.parent.postMessage(json, ltng_origin);  

        }
        
        var _recognition = null;
        
        function startDictation(config) {
        
            //console.warn('voiceproxy - startDictation: ', config);
            
            //console.warn("window.hasOwnProperty('webkitSpeechRecognition'): ", window.hasOwnProperty('webkitSpeechRecognition'));
            
            if (window.hasOwnProperty('webkitSpeechRecognition')) {
                /*
                if (typeof recognition !== 'undefined' && recognition !== null) {
                    recognition.stop();
                    var json = JSON.stringify({type: "response", uid: _uid, response: {message: 'Dictation already started'}});
                    window.parent.postMessage(json, ltng_origin);
                    return;
                } else {                
                    recognition = new webkitSpeechRecognition();
                }
                */

                /*
                var recognition = new webkitSpeechRecognition();
                recognition.continuous = config.continuous;
                recognition.interimResults = config.interimResults;
                recognition.maxAlternatives = config.maxAlternatives;            
                recognition.lang = "en-US";
                recognition.start();   

                _recognition = recognition;
                */
                            
                var recognition = null;
                
                if (typeof _recognition !== 'undefined' && _recognition !== null) {
                    recognition = _recognition;
                } else {
                
                    recognition = new webkitSpeechRecognition();
                    _recognition = recognition;
                
                
                    recognition.continuous = config.continuous;
                    recognition.interimResults = config.interimResults;
                    recognition.maxAlternatives = config.maxAlternatives;            
                    recognition.lang = "en-US";
                //}
                          
                    var response = null;
                    
                    recognition.onresult = function(e) {
                        /*
                        console.warn('voiceproxy - recognition.onresult: ', e);
                        console.warn('results.length: ', e.results.length);
                        console.warn('transcript: ', e.results[0][0].transcript);
                        console.warn('confidence: ', e.results[0][0].confidence);                    
                        console.warn('isFinal: ', e.results[0].isFinal);
                        */

                        if (e.results[0].isFinal) {
                        //if (config.interimResults === true || e.results[0].isFinal) {
                        
                            var resultsList = [];
                            var alternative = null;
                            for (var i = 0; i < e.results.length; i++) {
                                resultList = [];
                                for (var j = 0; j < e.results[i].length; j++) {
                                    alternative = e.results[i][j];
                                    //console.warn('alternative: ', alternative);
                                    resultList.push({
                                        transcript: alternative.transcript,
                                        confidence: alternative.confidence,
                                        isFinal: e.results[i].isFinal //alternative.isFinal === true ? true : false
                                    });
                                }
                                resultsList.push(resultList);
                            }                  
                            
                            response = {
                                source: 'SpeechRecognition',                        
                                phase: 'onresult',
                                results: resultsList,
                                config: config
                            };
                                                                                
                            var json = JSON.stringify({type: "response", uid: _uid, response: response});
                            /*
                            window.parent.postMessage(json, ltng_origin);            
                            recognition.stop();
                            */
                            //console.warn('voiceproxy - sending json: ', json);
                            window.parent.postMessage(json, ltng_origin);            
                            
                            //recognition.stop();

                            setTimeout(function() {
                              //console.warn('voiceanalysisproxy - onresult called setTimeout, now calling recognition.stop');
                              recognition.stop();
                            }, 50);                            

                        }
                    };
                    
                    recognition.onerror = function(e) {
                        //console.warn('recognition.onerror: ', e);
                        //console.warn('error: ', e.error);
                        //console.warn('message: ', e.message);
                        recognition.stop();
                        response = {
                            source: 'SpeechRecognition',                    
                            phase: 'onerror',
                            error: {
                                error: e.error,
                                message: e.message
                            },
                            config: config
                        };                
                        var json = JSON.stringify({type: "response", uid: _uid, response: response});
                        window.parent.postMessage(json, ltng_origin);                
                    }
            
                    recognition.nomatch = function(e) {
                        //console.warn('recognition.nomatch: ', e);
                        recognition.stop();
                        response = {
                            source: 'SpeechRecognition',                    
                            phase: 'nomatch',
                            error: {
                                error: 'No match'
                            },
                            config: config
                        };                
                        var json = JSON.stringify({type: "response", uid: _uid, response: response});
                        window.parent.postMessage(json, ltng_origin);                
                    }
                    
                    recognition.onstart = function(e) {
                        //console.warn('recognition.onstart: ', e);
                        var response = {
                            source: 'SpeechRecognition',                
                            phase: 'onstart',
                            config: config
                        };
                                                                            
                        var json = JSON.stringify({type: "response", uid: _uid, response: response});
                        window.parent.postMessage(json, ltng_origin);            
                    }
                    recognition.onend = function(e) {
                        //console.warn('recognition.onend: ', e);
                        
                        _recognition = null;
                        
                        var response = {
                            source: 'SpeechRecognition',                    
                            phase: 'onend',
                            config: config
                        };
                                                                            
                        var json = JSON.stringify({type: "response", uid: _uid, response: response});
                        window.parent.postMessage(json, ltng_origin);            
                    }            
                    recognition.onspeechstart = function(e) {
                        //console.warn('recognition.onspeechstart: ', e);
                        var response = {
                            source: 'SpeechRecognition',                    
                            phase: 'onspeechstart',
                            config: config
                        };
                                                                            
                        var json = JSON.stringify({type: "response", uid: _uid, response: response});
                        window.parent.postMessage(json, ltng_origin);            
                    }
                    recognition.onspeechend = function(e) {
                        //console.warn('recognition.onspeechend: ', e);
                        var response = {
                            source: 'SpeechRecognition',                    
                            phase: 'onspeechend',
                            config: config
                        };
                                                                            
                        var json = JSON.stringify({type: "response", uid: _uid, response: response});
                        window.parent.postMessage(json, ltng_origin);                     
                    }
                    /*
                    recognition.onsoundstart = function(e) {
                        //console.warn('recognition.onsoundstart: ', e);
                        var response = {
                            source: 'SpeechRecognition',                    
                            phase: 'onsoundstart',
                            config: config
                        };
                                                                            
                        var json = JSON.stringify({type: "response", uid: _uid, response: response});
                        window.parent.postMessage(json, ltng_origin);                     
                    }
                    recognition.onsoundend = function(e) {
                        //console.warn('recognition.onsoundend: ', e);
                        var response = {
                            source: 'SpeechRecognition',                    
                            phase: 'onsoundend',
                            config: config
                        };
                                                                            
                        var json = JSON.stringify({type: "response", uid: _uid, response: response});
                        window.parent.postMessage(json, ltng_origin);                     
                    }
                    recognition.onaudiostart = function(e) {
                        //console.warn('recognition.onaudiostart: ', e);
                        var response = {
                            source: 'SpeechRecognition',                    
                            phase: 'onaudiostart',
                            config: config
                        };
                                                                            
                        var json = JSON.stringify({type: "response", uid: _uid, response: response});
                        window.parent.postMessage(json, ltng_origin);                     
                    }
                    recognition.onaudioend = function(e) {
                        //console.warn('recognition.onaudioend: ', e);
                        var response = {
                            source: 'SpeechRecognition',                    
                            phase: 'onaudioend',
                            config: config
                        };
                                                                            
                        var json = JSON.stringify({type: "response", uid: _uid, response: response});
                        window.parent.postMessage(json, ltng_origin);                     
                    }
                    */            
                    recognition.onpause = function(e) {
                        //console.warn('recognition.onpause: ', e);
                        var response = {
                            source: 'SpeechRecognition',                    
                            phase: 'onpause',
                            config: config
                        };
                                                                            
                        var json = JSON.stringify({type: "response", uid: _uid, response: response});
                        window.parent.postMessage(json, ltng_origin);                     
                    }
                    recognition.onresume = function(e) {
                        //console.warn('recognition.onresume: ', e);
                        var response = {
                            source: 'SpeechRecognition',                    
                            phase: 'onresume',
                            config: config
                        };
                                                                            
                        var json = JSON.stringify({type: "response", uid: _uid, response: response});
                        window.parent.postMessage(json, ltng_origin);                     
                    }
                    
                    recognition.start();
                }
            }
        }
        
        function stopDictation(config) {
            //console.warn('stopDictation: ', config);
            
            //console.warn('_recognition: ', _recognition, typeof _recognition);
            
            if (typeof _recognition !== 'undefined' && _recognition !== null) {
                _recognition.stop();
                _recognition = null;
                var response = {
                    source: 'SpeechRecognition',                    
                    phase: 'stopped',
                    config: config
                };                
                var json = JSON.stringify({type: "response", uid: _uid, response: response});
                //console.warn('voiceProxy sending: ', json);
                window.parent.postMessage(json, ltng_origin);            
            }
        }
  
    </script>
  </body>
</html>