<!DOCTYPE html>
<html>

<head>
  <title>Einstein Analytics - Lightning Out</title>
  <link href="/assets/styles/salesforce-lightning-design-system.min.css" type="text/css" rel="stylesheet" />
  <style>
    html,
    body {
      background-color: #f3f2f1;
    }
  </style>
</head>

<body>
  <div id="msteams"></div>
  <script src="https://<%= domain %>.my.salesforce.com/lightning/lightning.out.js"></script>
  <script src="/javascripts/force.all.js"></script>
  <script src="https://statics.teams.microsoft.com/sdk/v1.4.2/js/MicrosoftTeams.min.js" crossorigin="anonymous">
  </script>
  <script>
    var oauthResult = null;
    var oauthResultJson = null;

    try {
      oauthResultJson = '<%- oauthResult %>';
      oauthResult = JSON.parse(oauthResultJson);
    } catch (e) {
      console.warn('Exception: ', e);
    }

    console.warn('oauthResultJson: ', oauthResultJson);
    console.warn('oauthResult: ', oauthResult);

    var appId = '<%- appId %>';
    var loginURL = "https://login.salesforce.com";
    var oauthCallbackURL = window.location.origin + "/oauthcallback.html";
    var oauth = force.OAuth.createInstance(appId, loginURL, oauthCallbackURL);
    //var loAppName = "c:loApp";
    var loAppName = 'c:loApp';

    function loginToSalesforce(callback) {
      if (oauthResult) {
        console.warn('calling callback');
        if (typeof callback === 'function') {
          callback(null, oauthResult);
        }
      } else {
        console.warn('calling oauth.login');
        oauth.login().then(function (_oauthResult) {
          console.warn('_oauthResult: ', _oauthResult);

          oauthResult = _oauthResult;

          storeToken(oauthResult, function (err, result) {
            console.warn('storeToken returned: ', err, result);
          });

          if (typeof callback === 'function') {
            callback(null, oauthResult);
          }

        });
      }
    }

    function storeToken(oauthResult, callback) {
      let host = 'https://' + window.location.hostname;
      let port = window.location.port;
      if (port) {
        host += ':' + port;
      }

      let url = host + '/auth/token';

      //console.warn('url: ' + url);

      var req = new XMLHttpRequest();
      req.onreadystatechange = function (event) {
        //console.warn('event: ', event);
        //console.warn('req: ', req);
        // XMLHttpRequest.HEADERS_RECEIVED
        if (req.readyState == 2) {} else if (req.readyState == 4) {
          var result = null;
          var error = null;
          if (req.status >= 200 && req.status <= 299) {
            //console.log('response: ', req.response);
            result = JSON.parse(req.response);
          } else {
            // Something went wrong.
          }
          if (typeof callback === 'function') {
            callback(error, result);
          }
        }
      };

      req.open('POST', url);

      req.setRequestHeader('Content-Type', 'application/json');
      req.setRequestHeader('Access-Control-Allow-Origin', '*');
      //req.setRequestHeader('Authorization', 'Bearer ' + _oauthResult.accessToken);

      //console.warn('calling req.send');        
      let body = JSON.stringify(oauthResult);
      //console.warn('body: ', body);
      req.send(body);

    }

    function setupSalesforce() {
      loginToSalesforce(function (err, result) {
        console.warn('loginToSalesforce returned: ', err, result);
        var ltngURL = oauthResult.instanceURL.replace(/my.salesforce/, "lightning.force")

        $Lightning.use(loAppName, function (evt) {
          var config = {};
          $Lightning.createComponent("c:msTeamsDemo", config, "msteams", function (cmp, msg, err) {});
        }, ltngURL, oauthResult.accessToken);

      });
    }

    function toQueryString(queryParams) {
      let encodedQueryParams = [];
      for (let key in queryParams) {
        encodedQueryParams.push(key + "=" + encodeURIComponent(queryParams[key]));
      }
      return encodedQueryParams.join("&");
    }

    function _decimalToHex(number) {
      var hex = number.toString(16);
      while (hex.length < 2) {
        hex = '0' + hex;
      }
      return hex;
    }

    function _guid() {
      var cryptoObj = window.crypto || window.msCrypto; // for IE 11
      if (cryptoObj && cryptoObj.getRandomValues) {
        var buffer = new Uint8Array(16);
        cryptoObj.getRandomValues(buffer);
        //buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).
        buffer[6] |= 0x40; //buffer[6] | 01000000 will set the 6 bit to 1.
        buffer[6] &= 0x4f; //buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = "4".
        //buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.
        buffer[8] |= 0x80; //buffer[8] | 10000000 will set the 7 bit to 1.
        buffer[8] &= 0xbf; //buffer[8] & 10111111 will set the 6 bit to 0.
        return _decimalToHex(buffer[0]) + _decimalToHex(buffer[1]) + _decimalToHex(buffer[2]) + _decimalToHex(buffer[
          3]) + '-' + _decimalToHex(buffer[4]) + _decimalToHex(buffer[5]) + '-' + _decimalToHex(buffer[6]) +
          _decimalToHex(buffer[7]) + '-' +
          _decimalToHex(buffer[8]) + _decimalToHex(buffer[9]) + '-' + _decimalToHex(buffer[10]) + _decimalToHex(buffer[
            11]) + _decimalToHex(buffer[12]) + _decimalToHex(buffer[13]) + _decimalToHex(buffer[14]) + _decimalToHex(
            buffer[15]);
      } else {
        var guidHolder = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        var hex = '0123456789abcdef';
        var r = 0;
        var guidResponse = "";
        for (var i = 0; i < 36; i++) {
          if (guidHolder[i] !== '-' && guidHolder[i] !== '4') {
            // each x and y needs to be random
            r = Math.random() * 16 | 0;
          }
          if (guidHolder[i] === 'x') {
            guidResponse += hex[r];
          } else if (guidHolder[i] === 'y') {
            // clock-seq-and-reserved first hex is filtered and remaining hex values are random
            r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??
            r |= 0x8; // set pos 3 to 1 as 1???
            guidResponse += hex[r];
          } else {
            guidResponse += guidHolder[i];
          }
        }
        return guidResponse;
      }
    };

    function setupTeams() {
      console.warn('setupTeams');
      microsoftTeams.initialize();
      microsoftTeams.registerOnThemeChangeHandler(function (theme) {
        console.warn('theme changed: ', theme);
      });


      console.warn('caling microsoftTeams.getContext');
      microsoftTeams.getContext(function (context) {
        console.warn('getContext returned: ', context);
        // Generate random state string and store it, so we can verify it in the callback
        let state = _guid();
        //localStorage.setItem("simple.state", state);
        //localStorage.removeItem("simple.error");
        // See https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols-implicit
        // for documentation on these query parameters
        let queryParams = {
          client_id: "e52cb5ce-69d3-40af-afe8-ffb57fca3536",
          response_type: "id_token token",
          response_mode: "fragment",
          resource: "https://graph.microsoft.com/",
          redirect_uri: window.location.origin + "/lo_msteams",
          nonce: _guid(),
          state: state,
          login_hint: context.loginHint,
        };
        // Go to the AzureAD authorization endpoint (tenant-specific endpoint, not "common")
        // For guest users, we want an access token for the tenant we are currently in, not the home tenant of the guest. 
        let authorizeEndpoint =
          `https://login.microsoftonline.com/${context.tid}/oauth2/authorize?${toQueryString(queryParams)}`;
        window.location.assign(authorizeEndpoint);
      });




      microsoftTeams.getTabInstances(function (tabInfo) {
        console.warn('getTabInstances returned: ', tabInfo);
      });
      /*
              try {
                console.warn('microsoftTeams.teamTabs: ', microsoftTeams.teamTabs);
              } catch (e) {
                console.error(e);
              }

              try {
                console.warn('microsoftTeams.conversation: ', microsoftTeams.conversation);
              } catch (e) {
                console.error(e);
              }
      */
      /*
              getTeamInfo(function(err, info) {
                console.warn('getTeamInfo returned: ', err, info);
              });
      */
    }

    function getTeamInfo() {
      let host = 'https://' + window.location.hostname;
      let port = window.location.port;
      if (port) {
        host += ':' + port;
      }

      let url = host + '/graph/beta/me/joinedTeams';

      url = 'https://graph.microsoft.com/v1.0/me/joinedTeams';

      console.warn('url: ' + url);

      var req = new XMLHttpRequest();
      req.onreadystatechange = function (event) {
        //console.warn('event: ', event);
        //console.warn('req: ', req);
        // XMLHttpRequest.HEADERS_RECEIVED
        if (req.readyState == 2) {} else if (req.readyState == 4) {
          var result = null;
          var error = null;
          if (req.status >= 200 && req.status <= 299) {
            console.log('response: ', req.response);
            result = JSON.parse(req.response);
          } else {
            // Something went wrong.
          }
          if (typeof callback === 'function') {
            callback(error, result);
          }
        }
      };

      req.open('GET', url);

      req.setRequestHeader('Content-Type', 'application/json');
      req.setRequestHeader('Access-Control-Allow-Origin', '*');
      //req.setRequestHeader('Authorization', 'Bearer ' + _oauthResult.accessToken);

      //console.warn('calling req.send');        
      //let body = JSON.stringify(payload);
      req.send(); //body); 

    }

    var _readyCallback = function () {
      //console.warn('document ready callback!!!');
      setupSalesforce();
      setupTeams();
    };

    if (document.readyState === "complete" || (document.readyState !== "loading" && !document.documentElement
        .doScroll)) {
      _readyCallback();
    } else {
      document.addEventListener("DOMContentLoaded", _readyCallback);
    }
  </script>
</body>

</html>