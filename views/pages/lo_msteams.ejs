<!DOCTYPE html>
<html>
  <head>
    <title>Einstein Analytics - Lightning Out</title>
    <link href="/assets/styles/salesforce-lightning-design-system.min.css" type="text/css" rel="stylesheet"/>
    <style>
      html, body {
        background-color: #f3f2f1;
      }

    </style>
  </head>
  <body>
    <div id="msteams"></div>
    <script src="https://<%= domain %>.my.salesforce.com/lightning/lightning.out.js"></script>
    <script src="/javascripts/force.all.js"></script>
    <script src="https://statics.teams.microsoft.com/sdk/v1.4.2/js/MicrosoftTeams.min.js" crossorigin="anonymous"></script>
    <script>

      var oauthResult = null;
      var oauthResultJson = null;

      try {
        oauthResultJson = '<%- oauthResult %>';
        oauthResult = JSON.parse(oauthResultJson);
      } catch (e) {
        console.warn('Exception: ', e);
      }

      console.warn('oauthResultJson: ', oauthResultJson);
      console.warn('oauthResult: ', oauthResult);

      var appId = '<%- appId %>';
      var loginURL = "https://login.salesforce.com";
      var oauthCallbackURL = window.location.origin + "/oauthcallback.html";
      var oauth = force.OAuth.createInstance(appId, loginURL, oauthCallbackURL);
      //var loAppName = "c:loApp";
      var loAppName = 'c:loApp';

      function loginToSalesforce(callback) {
        if (oauthResult) {
          console.warn('calling callback');
          if (typeof callback === 'function') {
            callback(null, oauthResult);
          }
        } else {
          console.warn('calling oauth.login');
          oauth.login().then(function(_oauthResult) {
            console.warn('_oauthResult: ', _oauthResult); 
            
            oauthResult = _oauthResult;

            storeToken(oauthResult, function(err, result) {
              console.warn('storeToken returned: ', err, result);
            });

            if (typeof callback === 'function') {
              callback(null, oauthResult);
            }
  
          });
        }
      }

      function setupSalesforce() {
        loginToSalesforce(function(err, result) {
          console.warn('loginToSalesforce returned: ', err, result);
          var ltngURL = oauthResult.instanceURL.replace(/my.salesforce/, "lightning.force")

          $Lightning.use(loAppName, function(evt) {
            var config = {};
            $Lightning.createComponent("c:msTeamsDemo", config, "msteams", function(cmp, msg, err) {});
          }, ltngURL, oauthResult.accessToken);        

        });
      }

      function storeToken(oauthResult, callback) {
        let host = 'https://' + window.location.hostname;
        let port = window.location.port;
        if (port) {
          host += ':' + port;
        }

        let url = host + '/auth/token';

        //console.warn('url: ' + url);

        var req = new XMLHttpRequest();     
        req.onreadystatechange = function(event) {
          //console.warn('event: ', event);
          //console.warn('req: ', req);
          // XMLHttpRequest.HEADERS_RECEIVED
          if (req.readyState == 2) {
          } else if (req.readyState == 4) {
            var result = null;
            var error = null;
            if (req.status >= 200 && req.status <= 299) {                    
              //console.log('response: ', req.response);
              result = JSON.parse(req.response);
            } else {
              // Something went wrong.
            }
            if (typeof callback === 'function') {
              callback(error, result);
            }
          }
        };

        req.open('POST', url);
      
        req.setRequestHeader('Content-Type', 'application/json');
        req.setRequestHeader('Access-Control-Allow-Origin', '*');
        //req.setRequestHeader('Authorization', 'Bearer ' + _oauthResult.accessToken);

        //console.warn('calling req.send');        
        let body = JSON.stringify(oauthResult);
        //console.warn('body: ', body);
        req.send(body); 

      }



      function setupTeams() {
        microsoftTeams.initialize();
        microsoftTeams.registerOnThemeChangeHandler(function(theme) {
          console.warn('theme changed: ', theme);
        });

        microsoftTeams.getContext(function(context) {
          console.warn('getContext returned: ', context);
        });

        microsoftTeams.getTabInstances(function(tabInfo) {
          console.warn('getTabInstances returned: ', tabInfo);
        });
/*
        try {
          console.warn('microsoftTeams.teamTabs: ', microsoftTeams.teamTabs);
        } catch (e) {
          console.error(e);
        }

        try {
          console.warn('microsoftTeams.conversation: ', microsoftTeams.conversation);
        } catch (e) {
          console.error(e);
        }
*/        
/*
        getTeamInfo(function(err, info) {
          console.warn('getTeamInfo returned: ', err, info);
        });
*/        
      }

      function getTeamInfo() {
        let host = 'https://' + window.location.hostname;
        let port = window.location.port;
        if (port) {
          host += ':' + port;
        }

        let url = host + '/graph/beta/me/joinedTeams';

        console.warn('url: ' + url);

        var req = new XMLHttpRequest();     
        req.onreadystatechange = function(event) {
          //console.warn('event: ', event);
          //console.warn('req: ', req);
          // XMLHttpRequest.HEADERS_RECEIVED
          if (req.readyState == 2) {
          } else if (req.readyState == 4) {
            var result = null;
            var error = null;
            if (req.status >= 200 && req.status <= 299) {                    
              console.log('response: ', req.response);
              result = JSON.parse(req.response);
            } else {
              // Something went wrong.
            }
            if (typeof callback === 'function') {
              callback(error, result);
            }
          }
        };

        req.open('GET', url);
      
        req.setRequestHeader('Content-Type', 'application/json');
        req.setRequestHeader('Access-Control-Allow-Origin', '*');
        //req.setRequestHeader('Authorization', 'Bearer ' + _oauthResult.accessToken);

        //console.warn('calling req.send');        
        //let body = JSON.stringify(payload);
        req.send();//body); 

      }

      var _readyCallback = function(){
        //console.warn('document ready callback!!!');
        setupSalesforce();
        setupTeams();
      };
      
      if (document.readyState === "complete" || (document.readyState !== "loading" && !document.documentElement.doScroll)) {
        _readyCallback();
      } else {
        document.addEventListener("DOMContentLoaded", _readyCallback);
      }      
    </script>
  </body>
</html>