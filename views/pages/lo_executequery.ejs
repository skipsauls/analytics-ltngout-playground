<!DOCTYPE html>
<html>
  <head>
    <title>Einstein Analytics - Lightning Out</title>
    <link href="/assets/styles/salesforce-lightning-design-system.min.css" type="text/css" rel="stylesheet"/>
  </head>
  <body>
    <!--
    <h1>Host: <%- host %></h1>
    <h1>Domain: <%- domain %></h1>
    <h1>App ID: <%- appId %></h1>
    -->
    <div id="execute_query"></div>
    <div id="sdk"></div>
    <button onclick="test();" label="Test">Test 2</button>
    <script src="https://<%= domain %>.my.salesforce.com/lightning/lightning.out.js"></script>
    <script src="/javascripts/force.all.js"></script>
    <script>
      var appId = '<%- appId %>';
      var loginURL = "https://login.salesforce.com";
      var oauthCallbackURL = window.location.origin + "/oauthcallback.html";
      var oauth = force.OAuth.createInstance(appId, loginURL, oauthCallbackURL);
      var loAppName = "c:loApp";
      var sdk = null;
      oauth.login().then(function(oauthResult) {      
        var ltngURL = oauthResult.instanceURL.replace(/my.salesforce/, "lightning.force")
        $Lightning.use(loAppName, function(evt) {
          var config = {};
          $Lightning.createComponent("eadx:executeQueryTab", config, "execute_query", function(cmp, msg, err) {});
          $Lightning.createComponent("wave:sdk", {}, "sdk", function(cmp, msg, err) {
            sdk = cmp;
            test();
            /*
            var query = "q = load \"0FbB0000000BWZRKA4/0FcB0000002OPtKKAW\";q = foreach q generate 'CloseDate' as 'CloseDate', 'ExpectedRevenue' as 'ExpectedRevenue', 'Fiscal' as 'Fiscal', 'FiscalQuarter' as 'FiscalQuarter', 'FiscalYear' as 'FiscalYear', 'ForecastCategory' as 'ForecastCategory', 'Id' as 'Id', 'IsWon' as 'IsWon', 'LeadSource' as 'LeadSource', 'Name' as 'Name', 'Probability' as 'Probability', 'StageName' as 'StageName', 'Type' as 'Type', 'eadx__OrderNumber__c' as 'eadx__OrderNumber__c';q = limit q 100;";
            executeQuery(query, function(err, results) {
              console.warn('executeQuery returned: ', err, results);
            });
            */
              });
        }, ltngURL, oauthResult.accessToken);        
      });

      function test() {
        console.warn('test');
        var query = "q = load \"0FbB0000000BWZRKA4/0FcB0000002OPtKKAW\";q = foreach q generate 'CloseDate' as 'CloseDate', 'ExpectedRevenue' as 'ExpectedRevenue', 'Fiscal' as 'Fiscal', 'FiscalQuarter' as 'FiscalQuarter', 'FiscalYear' as 'FiscalYear', 'ForecastCategory' as 'ForecastCategory', 'Id' as 'Id', 'IsWon' as 'IsWon', 'LeadSource' as 'LeadSource', 'Name' as 'Name', 'Probability' as 'Probability', 'StageName' as 'StageName', 'Type' as 'Type', 'eadx__OrderNumber__c' as 'eadx__OrderNumber__c';q = limit q 100;";
        executeQuery(query, function(err, results) {
          console.warn('executeQuery returned: ', err, results);
        });
      }

      function executeQuery(query, callback) {
        var context = {apiVersion: '46'};
        var methodName = 'executeQuery';
        var methodName = 'listDashboards';
        var methodParameters = {
            query: query
        };
        console.warn('executeQuery');
        console.warn('query: ', query);
        console.warn('methodName: ', methodName);
        console.warn('methodParameters: ', methodParameters);
        console.warn('sdk: ', sdk);
        sdk.invokeMethod(context, methodName, methodParameters, $A.getCallback(function(err, data) {
            if (err !== null) {
                if (callback !== null && typeof callback !== 'undefined') {
                    callback(err, null);
                } else {
                    return err;
                }
            } else {
                let resp = JSON.parse(data);
                if (callback !== null && typeof callback !== 'undefined') {
                    callback(null, resp.results);
                } else {
                    return data;
                }
            }
        }));
    }


    </script>
  </body>
</html>